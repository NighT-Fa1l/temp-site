<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="/style.css">
    <style>
        *{  margin: 0;
    border: 0;
    padding: 0;}

header{

    width: auto;
    height: 15vh;
    background-image: url(/img);
    background-size: cover;
    margin: 20px;
    
}
header nav{
    display: flex;
    position: relative;
    justify-content: space-between;
    
}
header nav ul{
    display: flex;
    justify-content: space-between;
}
header nav ul li{
    margin-left: 30px;
    list-style: none;
}
header nav ul li a {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    font-size: none;
    text-decoration: none;
    color: aliceblue;
}
/*svg*/
/* Initially, the path is invisible */
.long path {
    stroke: #744A4A;
    stroke-width: 8;
    fill: none;
    stroke-dasharray: 4000; /* Set a large number that is longer than the path's length */
    stroke-dashoffset: 4000; /* Set to the same value to hide the path initially */
    transition: stroke-dashoffset 2s ease-in-out; /* Smooth animation */
}

/* Animation trigger when the SVG is in view */
.long.is-visible path {
    stroke-dashoffset: 0; /* When the SVG is visible, "draw" the path by reducing the offset */
}

/* Add other styles if necessary for centering the SVG, etc. */
.long {
    position: absolute;
    height: 65%;
    left: 50%;
    transform: translateX(-50%);
}

/*.long line{
    stroke: aqua;
    stroke-width: 5;
    fill: none;
    
}
/*main*/

main .about .ab{
    padding: 12% 0 0 0;
}
.skills{
    margin: 50px;
}
.skills p{
    margin: 50px 0 50px 0;
}
.about{
    width: 100%;
    height: 70vh;
    display: flex;
    justify-content: space-around;

}
.ab p{
    font-size: 50px;
    text-align: center;
    
}
.s1{
    position: relative;
    padding: 35px 0 0 100px;
   
}
.s2{
    position: relative;
    padding: 0 140px 0 0;
   
}
.s3{
    position: relative;
    padding: 35px 0 0 100px;
   
}
.s4{
    position: relative;
    padding: 0 140px 0 0;
   
}
/*game*/
.demo{
    margin: 60px;
    display: flex;
    justify-content: space-between;
}
.game {
    margin: 0;
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 80vh;
    
    
    background-color: #111;
    position: relative;  /* Ensure absolute positioning works inside this container */
}

#gameCanvas {
    width: 100%;
    
    border: 2px solid white;
}

#startButton, #restartButton {
    position: absolute;
    padding: 20px 40px;
    font-size: 24px;
    background-color: #00bfff;
    color: white;
    border: none;
    border-radius: 8px;
    cursor: pointer;
}
#startButton {
    display: block;  /* Ensure it's visible when the page loads */
}
#restartButton {
    position: absolute;
    left: 50%;
    bottom: 35%;
    transform: translateX(-50%);
    padding: 20px 40px;
    font-size: 24px;
    background-color: #00bfff;
    color: white;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    display: none;
    transition: top 0.5s; /* Smooth transition for the vertical movement */
}

#startButton:hover, #restartButton:hover {
    background-color: #666;
}

h2{
    text-align: center;
}
.code{
    margin: 50px;
}
/*contact*/
.contact{
    width: 100%;
    height: 50vh;
    text-align: center;
}
  
  form {
    width: 45%;
    height: 90%;
    display: inline-block;
    text-align: left;
    padding: 20px;
    background-color: #f9f9f9;
    border: 1px solid #ccc;
    border-radius: 5px;
  }
  
  input, textarea {
    width: 100%;
    padding: 8px;
    margin: 10px 0;
    border: 1px solid #ccc;
    border-radius: 4px;
  }
  
  button {
    padding: 10px 20px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  button:hover {
    background-color: #45a049;
  }
footer{
    text-align: center;
    text-transform: capitalize;
    height: 60px;
    margin-top: 100px;
}  
    </style>
</head>
<body>
    <header>
        <nav>
            <p><svg width="200" height="50" xmlns="http://www.w3.org/2000/svg">
            <text x="10" y="30" font-family="Arial" font-size="30" fill="black">NighT</text>
            </svg></p>
            <ul>
                <li><a href="">About</a></li>
                <li><a href="">Mail</a></li>
                <li><a href="">More</a></li>
            </ul>
        </nav>
    </header>

   <!--  <svg class="long" xmlns="http://www.w3.org/2000/svg">
            <line x1="120" y1="200%" x2="120"  ></line>
    </svg> -->

    <main>

        <div class="about">
            <div class="ab">
                <p>Hello, I am NighT</p>
                <p>Im a profetional web dev</p>
            </div>
        </div>
        <!--<div class="svg-container"><svg class="long" width="156" height="1192" viewBox="0 0 156 1192" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M80.5 0.5V241.5L7.5 303L80.5 354V515.5L149.5 570.5L80.5 641V796L7.5 867.5L80.5 931.5V1066.5L149.5 1133L80.5 1188.5" stroke="#744A4A" stroke-width="8"/>
            </svg></div> -->
            <svg class="long" id="animated-svg" width="156" height="1192" viewBox="0 0 156 1192" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M80.5 0.5V241.5L7.5 303L80.5 354V515.5L149.5 570.5L80.5 641V796L7.5 867.5L80.5 931.5V1066.5L149.5 1133L80.5 1188.5" stroke="#744A4A" stroke-width="8"/>
            </svg>
      
        <div class="skills">
            <p class="s1">
                Lorem ipsum dolor sit, amet consectetur adipisicing elit. <br>
                Ex, dolor omnis consectetur officiis, odit itaque doloribus <br>
                est pariatur dolore cumque accusantium! <br>
                Earum accusantium animi ut consectetur pariatur incidunt dicta qui.
            </p> 
            <p class="s2" style="text-align: right">
                Lorem ipsum dolor sit, amet consectetur adipisicing elit. <br>
                Ex, dolor omnis consectetur officiis, odit itaque doloribus <br>
                est pariatur dolore cumque accusantium! <br>
                Earum accusantium animi ut consectetur pariatur incidunt dicta qui.
            </p> 
            <p class="s3">
                Lorem ipsum dolor sit, amet consectetur adipisicing elit. <br>
                Ex, dolor omnis consectetur officiis, odit itaque doloribus <br>
                est pariatur dolore cumque accusantium! <br>
                Earum accusantium animi ut consectetur pariatur incidunt dicta qui.
            </p> 
            <p class="s4" style="text-align: right;">
                Lorem ipsum dolor sit, amet consectetur adipisicing elit. <br>
                Ex, dolor omnis consectetur officiis, odit itaque doloribus <br>
                est pariatur dolore cumque accusantium! <br>
                Earum accusantium animi ut consectetur pariatur incidunt dicta qui.
            </p> 
        </div>
    
    </main>
    <h2>Demo code</h2>
    <div class="demo">
        <div class="code">
            <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Laboriosam,<br>
                 officia quae nostrum ducimus rem fugiat harum voluptas qui non similique eum, culpa alias.br <br>
                  Voluptas architecto eaque explicabo odio consequuntur minima eligendi, repudiandae nihil est velit alias <br>
                   voluptates incidunt sed suscipit earum quos laborum dolorem? Sed magnam dolores commodi soluta assumenda, voluptatibus <br>
                    rerum at dignissimos consequatur veniam possimus esse aliquid inventore!</p>
        </div>
        <div class="game">
            <canvas id="gameCanvas"></canvas>
            <button style="margin: 15px 0px;" id="restartButton">Restart</button>
            <button style="margin: 60px 0px;" id="startButton">Start</button>
        </div>
    </div>

    <div class="contact">
       <h2 style="margin: 50px;">Contact Us</h2>
    <form action="https://formsubmit.co/safawatsayam@gmail.com" method="POST">
        <label for="name">Name:</label><br>
        <input type="text" id="name" name="name" placeholder="Your Name"><br><br>

        <label for="email">Email:</label><br>
        <input type="email" id="email" name="email" placeholder="Your Email"><br><br>

        <label for="message">Message:</label><br>
        <textarea id="message" name="message" placeholder="Your Message"></textarea><br><br>

        <button type="submit">Submit</button>
    </form>
    </div>

    <footer><p>all rights reserved.2025</p></footer>
    <script >
        // Select the SVG element
const svgElement = document.getElementById('animated-svg');
const path = svgElement.querySelector('path');

// Get the total length of the path (used for stroke-dasharray and stroke-dashoffset)
const pathLength = path.getTotalLength();

// Set initial stroke-dasharray and stroke-dashoffset based on the path's length
path.style.strokeDasharray = pathLength;
path.style.strokeDashoffset = pathLength - 160;  // Keep the first 160px visible

// Variable to track the last scroll position
let lastScrollPosition = 0;

// Speed multiplier (adjust this value to make it faster or slower)
const speedMultiplier = 2;

// Listen for the scroll event
window.addEventListener('scroll', () => {
    // Get the scroll position and the window height
    const scrollPosition = window.scrollY;
    const documentHeight = document.documentElement.scrollHeight;
    const windowHeight = window.innerHeight;

    // Calculate the scroll progress as a value between 0 and 1
    const scrollProgress = scrollPosition / (documentHeight - windowHeight);

    // Apply the speed multiplier to make the animation faster
    const drawAmount = pathLength * scrollProgress * speedMultiplier;

    // Adjust dashoffset (drawing/erasing path) based on scroll direction
    if (scrollPosition > lastScrollPosition) {
        // Scrolling down, draw more
        path.style.strokeDashoffset = pathLength - drawAmount - 160;  // Adjust to keep first 160px visible
    } else {
        // Scrolling up, erase more
        path.style.strokeDashoffset = pathLength - drawAmount - 160;  // Same adjustment for erasing
    }

    // Update last scroll position for future comparison
    lastScrollPosition = scrollPosition;
});

    </script>
    <script >
        // Get the canvas and context
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// Get the start and restart buttons
const startButton = document.getElementById('startButton');
const restartButton = document.getElementById('restartButton');

// Set the canvas size
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

// Game variables
let spaceship;
let missiles = [];
let enemies = [];
let keys = {};
let gameOver = false;

// Spaceship class
class Spaceship {
    constructor(x, y) {
        this.x = x;
        this.y = y;
        this.width = 50;  // Spaceship size
        this.height = 50;
        this.speed = 5;
        this.color = 'white';
    }

    // Move the spaceship based on key input
    move() {
        if (keys['a'] && this.x > 0) this.x -= this.speed;  // Move left
        if (keys['d'] && this.x < canvas.width - this.width) this.x += this.speed;  // Move right
        if (keys['w'] && this.y > 0) this.y -= this.speed;  // Move up
        if (keys['s'] && this.y < canvas.height - this.height) this.y += this.speed;  // Move down
    }

    // Draw the spaceship
    draw() {
        ctx.fillStyle = this.color;
        ctx.fillRect(this.x, this.y, this.width, this.height);
    }

    // Fire a missile (small box projectile)
    fire() {
        const missileSize = Math.round(this.width * 0.05); // 5% of spaceship width
        missiles.push(new Missile(this.x + this.width / 2 - missileSize / 2, this.y, missileSize));
    }
}

// Missile class (small box projectile)
class Missile {
    constructor(x, y, size) {
        this.x = x;
        this.y = y;
        this.width = size;  // 5% of spaceship width
        this.height = size; // Assuming square missile
        this.speed = 7;
        this.color = 'white'; // White box for the missile
    }

    // Move the missile upwards
    move() {
        this.y -= this.speed;
    }

    // Draw the missile (box shape)
    draw() {
        ctx.fillStyle = this.color;
        ctx.fillRect(this.x, this.y, this.width, this.height);  // Draw as a small box
    }
}

// Enemy spaceship class
class Enemy {
    constructor(x, y) {
        this.x = x;
        this.y = y;
        this.width = 50;
        this.height = 50;
        this.speed = 2;
        this.color = 'green';
    }

    // Move the enemy downward
    move() {
        this.y += this.speed;
    }

    // Draw the enemy spaceship
    draw() {
        ctx.fillStyle = this.color;
        ctx.fillRect(this.x, this.y, this.width, this.height);
    }
}

// Generate enemies periodically
function createEnemy() {
    let x = Math.random() * (canvas.width - 50);
    let y = -50; // Start above the screen
    enemies.push(new Enemy(x, y));
}

// Handle key down/up events
window.addEventListener('keydown', (e) => {
    keys[e.key.toLowerCase()] = true;
});
window.addEventListener('keyup', (e) => {
    keys[e.key.toLowerCase()] = false;
});

// Check for collisions between missiles and enemies
function checkCollisions() {
    for (let i = 0; i < missiles.length; i++) {
        for (let j = 0; j < enemies.length; j++) {
            // Check if missile (box) hits enemy
            if (
                missiles[i].x < enemies[j].x + enemies[j].width &&
                missiles[i].x + missiles[i].width > enemies[j].x &&
                missiles[i].y < enemies[j].y + enemies[j].height &&
                missiles[i].y + missiles[i].height > enemies[j].y
            ) {
                // Missile hit the enemy, remove both
                missiles.splice(i, 1);
                enemies.splice(j, 1);
                i--;
                j--;
                break;
            }
        }
    }

    // Check if any enemy touches the spaceship
    for (let i = 0; i < enemies.length; i++) {
        if (
            enemies[i].x < spaceship.x + spaceship.width &&
            enemies[i].x + enemies[i].width > spaceship.x &&
            enemies[i].y < spaceship.y + spaceship.height &&
            enemies[i].y + enemies[i].height > spaceship.y
        ) {
            // Enemy touches spaceship, destroy the spaceship
            gameOver = true;
        }
    }
}

// Game loop function
function gameLoop() {
    if (gameOver) {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = 'white';
        ctx.font = '48px Arial';
        ctx.fillText('GAME OVER', canvas.width / 2 - 140, canvas.height / 2);
        
        // Show the restart button
        restartButton.style.display = 'block';
        return;
    }

    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Move and draw spaceship
    spaceship.move();
    spaceship.draw();

    // Move and draw missiles
    for (let i = 0; i < missiles.length; i++) {
        missiles[i].move();
        missiles[i].draw();

        // Remove missiles that go off the screen
        if (missiles[i].y < 0) {
            missiles.splice(i, 1);
            i--;
        }
    }

    // Move and draw enemies
    for (let i = 0; i < enemies.length; i++) {
        enemies[i].move();
        enemies[i].draw();

        // Remove enemies that go off the screen
        if (enemies[i].y > canvas.height) {
            enemies.splice(i, 1);
            i--;
        }
    }

    // Check for collisions
    checkCollisions();

    // Generate new enemies every 1.5 seconds
    if (Math.random() < 0.02) {
        createEnemy();
    }

    // Repeat the game loop
    requestAnimationFrame(gameLoop);
}

// Start the game
function startGame() {
    // Hide the start button
    startButton.style.display = 'none';
    
    // Initialize the spaceship
    spaceship = new Spaceship(canvas.width / 2 - 25, canvas.height - 60);
    missiles = [];
    enemies = [];
    gameOver = false;

    // Hide the restart button
    restartButton.style.display = 'none';

    // Start the game loop
    gameLoop();

    // Fire a missile every 200ms
    setInterval(() => {
        if (!gameOver) {
            spaceship.fire();  // Fire a missile every 200ms
        }
    }, 200);
}

// Restart button functionality
restartButton.addEventListener('click', () => {
    // Reset game variables
    spaceship = new Spaceship(canvas.width / 2 - 25, canvas.height - 60);
    missiles = [];
    enemies = [];
    gameOver = false;
    restartButton.style.display = 'none'; // Hide the restart button
    startGame();  // Restart the game loop
});

// Start button functionality
startButton.addEventListener('click', startGame);

    </script>
    
</body>
</html>
